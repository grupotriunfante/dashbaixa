<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kanban Baixas de Estoque - Din√¢mico</title>
    <style>
        /* [COLE AQUI TODO O CSS DA VERS√ÉO ANTERIOR - SEM MUDAN√áAS NO CSS] */
        /* ... (O mesmo CSS moderno que fizemos antes) ... */
         :root {
            --primary-color: #007bff; --success-color: #28a745; --danger-color: #dc3545;
            --light-gray: #f8f9fa; --medium-gray: #e9ecef; --dark-gray: #6c757d;
            --text-color: #343a40; --white: #ffffff; --border-color: #dee2e6;
            --shadow-sm: rgba(0, 0, 0, 0.08); --shadow-md: rgba(0, 0, 0, 0.1);
        }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; background-color: var(--light-gray); margin: 0; padding: 20px; color: var(--text-color); line-height: 1.5; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; padding-bottom: 15px; border-bottom: 1px solid var(--border-color);}
        .header h1 { text-align: left; color: #495057; margin: 0; font-weight: 500; font-size: 1.8rem; flex-grow: 1; }
        .header img { max-height: 50px; width: auto; }
        button { cursor: pointer; transition: background-color 0.2s ease; }
        .container { max-width: 100%; margin: 0 auto; }
        .section { background-color: var(--white); padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px var(--shadow-sm); margin-bottom: 25px; }
        .filter-container { display: flex; align-items: center; gap: 15px; flex-wrap: wrap; }
        .filter-container label { font-weight: 600; color: var(--dark-gray); }
        .filter-container select, .filter-container input, .filter-container button { padding: 10px 15px; border-radius: 5px; border: 1px solid var(--border-color); font-size: 14px; } /* Adicionado input */
        .filter-container button { background-color: var(--primary-color); color: var(--white); border: none; }
        .filter-container button:hover { background-color: #0056b3; }
        .kanban-board-wrapper { overflow-x: auto; padding: 10px 0; margin: 0 -20px; padding: 0 20px 15px 20px; }
        .kanban-board { display: flex; gap: 20px; min-height: 450px; width: max-content; }
        .kanban-column { background-color: var(--medium-gray); border-radius: 6px; padding: 15px; width: 300px; flex-shrink: 0; display: flex; flex-direction: column; box-shadow: 0 1px 3px var(--shadow-sm); }
        .kanban-column h2 { font-size: 1rem; margin: 0 0 15px 0; padding-bottom: 10px; border-bottom: 2px solid var(--border-color); text-align: center; color: var(--text-color); font-weight: 600; }
        #coluna-concluido { background-color: #e6f9f0; border-top: 4px solid var(--success-color); }
        #coluna-rejeitado { background-color: #fdeded; border-top: 4px solid var(--danger-color); }
        .kanban-card { display: block; text-decoration: none; color: inherit; background-color: var(--white); border-radius: 4px; padding: 12px 15px; margin-bottom: 12px; box-shadow: 0 2px 4px var(--shadow-md); font-size: 0.8rem; border-left: 4px solid var(--primary-color); transition: box-shadow 0.2s ease, transform 0.2s ease; }
        .kanban-card:hover { box-shadow: 0 5px 10px rgba(0,0,0,0.15); transform: translateY(-2px); }
        .kanban-card.rejeitado-card { border-left-color: var(--danger-color); }
        .kanban-card.concluido-card { border-left-color: var(--success-color); }
        .kanban-card strong { color: #495057; font-weight: 500; display: inline-block; min-width: 65px; }
        .kanban-card .info-line { margin-bottom: 4px; }
        .kanban-card .comentarios { margin-top: 8px; padding-top: 8px; border-top: 1px dashed #eee; font-style: italic; color: var(--dark-gray); font-size: 0.75rem; white-space: pre-wrap; word-break: break-word; }
        .kanban-card small { color: var(--dark-gray); font-size: 0.7rem; display: block; margin-top: 6px; text-align: right; }
        .loading { text-align: center; font-style: italic; color: var(--dark-gray); padding: 50px 0; }
        .update-time { margin-top: 20px; font-size: 0.8rem; color: var(--dark-gray); text-align: center; }
        @media (max-width: 768px) { /* Ajustado breakpoint */
            body { padding: 10px; }
            .header { flex-direction: column; align-items: flex-start; }
            .header h1 { font-size: 1.5rem; margin-bottom: 10px;}
            .header img { max-height: 40px; align-self: flex-end;}
            .section { padding: 15px; margin-bottom: 20px; }
            .filter-container { gap: 10px; flex-direction: column; align-items: stretch;} /* Empilha filtros */
            .filter-container select, .filter-container input, .filter-container button { width: 100%; box-sizing: border-box; }
            .kanban-board-wrapper { margin: 0 -10px; padding: 0 10px 10px 10px; }
            .kanban-column { width: 260px; min-width: 260px; padding: 10px; }
            .kanban-card { padding: 10px; font-size: 0.75rem; }
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="header">
             <h1>Gest√£o Visual das Solicita√ß√µes de Baixa</h1>
             <img src="http://i.imgur.com/Fln53Oi.png" alt="Logo">
        </div>

        <div class="section filter-container">
            <label for="unidadeFiltro">Unidade:</label>
            <select id="unidadeFiltro">
                <option value="todas">-- Todas --</option>
                <option value="ABC">ABC</option><option value="TCV">TCV</option><option value="TBL">TBL</option>
                <option value="TBE">TBE</option><option value="API">API</option><option value="TPA">TPA</option>
                <option value="TPH">TPH</option><option value="TSJ">TSJ</option><option value="TCA">TCA</option>
                <option value="TCG">TCG</option><option value="MCD">MCD</option>
            </select>

            <label for="mesFiltro">M√™s:</label>
            <select id="mesFiltro">
                <option value="todos">-- Todos --</option>
                <option value="1">Janeiro</option> <option value="2">Fevereiro</option> <option value="3">Mar√ßo</option>
                <option value="4">Abril</option> <option value="5">Maio</option> <option value="6">Junho</option>
                <option value="7">Julho</option> <option value="8">Agosto</option> <option value="9">Setembro</option>
                <option value="10">Outubro</option> <option value="11">Novembro</option> <option value="12">Dezembro</option>
            </select>

            <label for="anoFiltro">Ano:</label>
            <input type="number" id="anoFiltro" min="2020" max="2099" placeholder="Ano (ex: 2025)"> <button onclick="aplicarFiltros()">Filtrar</button> <button onclick="buscarEAtualizarKanban()">Atualizar Dados</button> <span class="loading" id="loadingSpinner" style="display: none; margin-left: auto;">üîÑ</span>
        </div>

        <div class="loading" id="loadingMessage" style="display: none;">Carregando dados do Kanban...</div>
        <div class="kanban-board-wrapper">
            <div class="kanban-board">
                <div class="kanban-column" id="coluna-solicitado"> <h2>Solicitado</h2> </div>
                <div class="kanban-column" id="coluna-aprovacao-pp"> <h2>Aprova√ß√£o PP</h2> </div>
                <div class="kanban-column" id="coluna-aprovacao-log"> <h2>Aprova√ß√£o Log√≠stica</h2> </div>
                <div class="kanban-column" id="coluna-aprovacao-fin"> <h2>Aprova√ß√£o Financeira</h2> </div>
                <div class="kanban-column" id="coluna-baixa-cpd"> <h2>Baixa CPD</h2> </div>
                <div class="kanban-column" id="coluna-concluido"> <h2>Conclu√≠do</h2> </div>
                <div class="kanban-column" id="coluna-rejeitado"> <h2>Rejeitado</h2> </div>
            </div>
        </div>
        <p class="update-time"><small>√öltima atualiza√ß√£o: <span id="lastUpdateTime">Nunca</span></small></p>
    </div>

    <script>
        const flowUrl = 'https://defaultaf73075ee5864d09b8b3d44b758089.52.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/b42da973b6334102a90433cb65b74dce/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=hvnPf8RyBdTS-ILDY5bE6Rle3Db2HpItaoaDX_M1Beg'; // <<< IMPORTANTE

        const mapaColunas = { /* ... (igual antes) ... */ };
        let todasSolicitacoes = []; // Guarda todos os dados recebidos do fluxo

        async function buscarEAtualizarKanban() {
            // ... (L√≥gica para buscar dados do flowUrl - IGUAL A ANTES) ...
            // Mas agora, guarda os dados recebidos na vari√°vel global
            const loadingMessage = document.getElementById('loadingMessage');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const kanbanWrapper = document.querySelector('.kanban-board-wrapper');
            loadingMessage.style.display = 'block'; loadingSpinner.style.display = 'inline';
            kanbanWrapper.style.display = 'none';

             try {
                const response = await fetch(flowUrl);
                if (!response.ok) throw new Error(`Erro HTTP: ${response.status} ${response.statusText}`);
                const data = await response.json();
                if (!Array.isArray(data)) {
                     throw new Error('Formato de dados inv√°lido (esperava lista).');
                }
                todasSolicitacoes = data; // GUARDA OS DADOS AQUI

                limparColunasKanban();
                desenharCardsKanban(todasSolicitacoes); // Desenha todos inicialmente
                aplicarFiltros(); // Aplica os filtros atuais (unidade E data)
                document.getElementById('lastUpdateTime').textContent = new Date().toLocaleString('pt-BR');
                loadingMessage.style.display = 'none';

            } catch (error) {
                console.error('Erro:', error);
                loadingMessage.textContent = `Falha: ${error.message}. Tente atualizar.`;
                loadingMessage.style.color = 'red'; loadingMessage.style.display = 'block';
                limparColunasKanban();
            } finally {
                 loadingSpinner.style.display = 'none';
                 kanbanWrapper.style.display = 'block';
            }
        }

        function limparColunasKanban() { /* ... (igual antes) ... */ }
        function desenharCardsKanban(solicitacoes) { /* ... (igual antes, cria os links <a>) ... */
             if (!Array.isArray(solicitacoes)) return;
             limparColunasKanban(); // Limpa antes de redesenhar

            solicitacoes.forEach(sol => {
                let colunaId;
                const isRejeitado = sol.Status === 'Reject' || sol.Status === 'Rejected';
                const isConcluido = sol.EtapaProcesso === 'Processo Finalizado e Notificado' || sol.Status === 'Conclu√≠do' || sol.Status === 'Baixa Conclu√≠da e NF Anexada';

                if (isRejeitado) colunaId = 'coluna-rejeitado';
                else if (isConcluido) colunaId = 'coluna-concluido';
                else colunaId = mapaColunas[sol.EtapaProcesso] || 'coluna-solicitado';

                const colunaElement = document.getElementById(colunaId);

                if (colunaElement) {
                    const cardLink = document.createElement('a');
                    cardLink.className = 'kanban-card';
                    cardLink.setAttribute('data-unidade', sol.Unidade || 'N/A');
                     // MUDAN√áA: Guarda o timestamp original para o filtro de data
                    cardLink.setAttribute('data-timestamp', sol.Timestamp || '');
                    cardLink.href = sol.UrlHtmlSolicitacao || '#';
                    cardLink.target = '_blank';

                    if (isRejeitado) cardLink.classList.add('rejeitado-card');
                    if (isConcluido) cardLink.classList.add('concluido-card');

                    let dataFormatada = sol.Timestamp || 'N/A';
                     if (sol.Timestamp) { try { const dataObj = new Date(sol.Timestamp); if (!isNaN(dataObj.getTime())) { dataFormatada = dataObj.toLocaleString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }); } } catch (e) { console.warn("Erro data:", sol.Timestamp, e); } }

                    const comentariosSanitizados = (sol.Comentarios || '').replace(/</g, "&lt;").replace(/>/g, "&gt;");

                    cardLink.innerHTML = `
                        <div class="info-line"><strong>ID:</strong> ${sol.ID_Solicitacao || 'N/A'}</div>
                        <div class="info-line"><strong>Unidade:</strong> ${sol.Unidade || 'N/A'}</div>
                        <div class="info-line"><strong>${sol.EtapaProcesso === 'coluna-solicitado' || sol.EtapaProcesso === 'In√≠cio do Processo' ? 'Solicitante:' : '√ölt. Resp.:'}</strong> ${sol.Solicitante || 'N/A'}</div>
                        <div class="info-line"><strong>Motivo:</strong> ${sol.Motivo || 'N/A'}</div>
                        ${(comentariosSanitizados && comentariosSanitizados.trim() !== '') ? `<div class="comentarios"><strong>Coment.:</strong> ${comentariosSanitizados}</div>` : ''}
                        <small>Atualizado: ${dataFormatada}</small>
                    `;
                    colunaElement.appendChild(cardLink);
                } else {
                    console.warn(`Coluna HTML '${colunaId}' n√£o encontrada para '${sol.EtapaProcesso}' (ID: ${sol.ID_Solicitacao})`);
                }
            });
        }

        // *** NOVA FUN√á√ÉO COMBINADA PARA APLICAR FILTROS ***
        function aplicarFiltros() {
            const selectUnidade = document.getElementById('unidadeFiltro');
            const unidadeSelecionada = selectUnidade.value;

            const selectMes = document.getElementById('mesFiltro');
            const mesSelecionado = selectMes.value; // Ser√° "todos", "1", "2", ..., "12"

            const inputAno = document.getElementById('anoFiltro');
            const anoSelecionado = inputAno.value; // Ser√° string vazia ou o ano digitado

            const cards = document.querySelectorAll('.kanban-card');

            cards.forEach(card => {
                const unidadeCard = card.getAttribute('data-unidade');
                const timestampCard = card.getAttribute('data-timestamp'); // Pega o timestamp original

                // --- L√≥gica de Filtro ---
                let mostrarCard = true; // Come√ßa assumindo que vai mostrar

                // 1. Filtro de Unidade
                if (unidadeSelecionada !== 'todas' && (!unidadeCard || unidadeCard.trim().toUpperCase() !== unidadeSelecionada.trim().toUpperCase())) {
                    mostrarCard = false; // Esconde se a unidade n√£o bater (e n√£o for "todas")
                }

                // 2. Filtro de Data (M√™s e Ano) - S√≥ aplica se ambos estiverem selecionados/preenchidos
                if (mostrarCard && mesSelecionado !== 'todos' && anoSelecionado && timestampCard) {
                    try {
                        const dataCard = new Date(timestampCard);
                        if (!isNaN(dataCard.getTime())) {
                            const mesCard = dataCard.getMonth() + 1; // getMonth() √© 0-11, ent√£o +1
                            const anoCard = dataCard.getFullYear();

                            // Compara m√™s E ano
                            if (mesCard.toString() !== mesSelecionado || anoCard.toString() !== anoSelecionado) {
                                mostrarCard = false; // Esconde se m√™s OU ano n√£o baterem
                            }
                        } else {
                             // Se a data no card for inv√°lida, esconde se um filtro de data estiver ativo
                             mostrarCard = false;
                        }
                    } catch(e) {
                         console.warn("Erro ao processar data do card para filtro:", timestampCard, e);
                         mostrarCard = false; // Esconde em caso de erro na data
                    }
                } else if (mostrarCard && (mesSelecionado !== 'todos' || anoSelecionado) && !timestampCard) {
                     // Se um filtro de data est√° ativo mas o card n√£o tem data, esconde
                     mostrarCard = false;
                }


                // --- Aplica Visibilidade ---
                card.style.display = mostrarCard ? 'block' : 'none';
            });
        }
        // *** FIM DA NOVA FUN√á√ÉO ***

        // *** REMOVIDO: function filtrarUnidade() { ... } ***

        // Listener para aplicar filtros quando qualquer um deles mudar
        document.getElementById('unidadeFiltro').addEventListener('change', aplicarFiltros);
        document.getElementById('mesFiltro').addEventListener('change', aplicarFiltros);
        document.getElementById('anoFiltro').addEventListener('input', aplicarFiltros); // 'input' reage enquanto digita

        // Carrega os dados iniciais ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', buscarEAtualizarKanban);
    </script>

</body>
</html>
